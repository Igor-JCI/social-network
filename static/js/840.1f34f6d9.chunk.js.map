{"version":3,"file":"static/js/840.1f34f6d9.chunk.js","mappings":"qKAGO,IAAMA,EAAW,SAACC,GACrB,IAAIA,EAGJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAmB,SAACF,GAChD,GAAIA,EAAMG,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,8KCDFE,EAA0E,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAC9EC,IADsG,YAC3FF,EAAKG,SAAWH,EAAKI,OACtC,OAAO,iBAAKC,UAAWH,EAAWI,EAAAA,EAAAA,MAAc,GAAzC,WACH,yBACKL,IAEJC,IAAY,0BAAOF,EAAKI,YAIpBG,EAA8B,SAACC,GACxC,IAAOC,EAAuBD,EAAvBC,MAAUC,GAAjB,OAA8BF,EAA9B,GACA,OAAO,SAACT,GAAD,kBAAgBS,GAAhB,cAAuB,uCAAcC,GAAWC,QAE9CC,EAA2B,SAACH,GACrC,IAAOC,EAAuBD,EAAvBC,MAAUC,GAAjB,OAA8BF,EAA9B,GACA,OAAO,SAACT,GAAD,kBAAgBS,GAAhB,cAAuB,oCAAWC,GAAWC,S,gFC3BxD,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCUpME,EAAa,SAACJ,GAEvB,OACI,gBAAKH,UAAS,UAAKQ,EAAL,YAAiBA,GAA/B,UACI,SAAC,KAAD,CAASC,GAAI,YAAcN,EAAMO,GAAjC,SAAsCP,EAAMQ,UCN3CC,EAAU,SAACT,GAEpB,OACE,gBAAKH,UAAWQ,EAAhB,SACKL,EAAMU,W,sCC0BXC,GAAcvB,EAAAA,EAAAA,GAAiB,IAe/BwB,GAAsBC,EAAAA,EAAAA,GAAoC,CAACC,KAAM,wBAA3CD,EAbkD,SAACb,GAC3E,OAAO,kBAAMe,SAAUf,EAAMgB,aAAtB,WACH,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWnB,EAAAA,EAAUoB,SAAU,CAACjC,EAAAA,EAAUyB,GAAcH,KAAK,iBAC7DY,YAAY,0BAEvB,0BACI,mD,+DCzCRC,EAA0B,SAACC,GAC3B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCiB3B,IAiBA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAlBkB,SAACJ,GACnB,MAAO,CACHK,QAASL,EAAMM,YAAYD,QAC3BE,SAAUP,EAAMM,YAAYC,SAC5BN,OAAQD,EAAME,KAAKD,WAIF,SAACO,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAiBD,UDxB/B,SAA6BE,GAchC,OAFqCR,EAAAA,EAAAA,IAAgDL,EAAhDK,EAVX,SAAC1B,GACvB,IAAOuB,EAAwBvB,EAAxBuB,OAAWrB,GAAlB,OAA+BF,EAA/B,GACA,OAAKuB,GAKE,SAACW,GAAD,UAAehC,KAJZ,SAAC,KAAD,CAAUI,GAAG,gBCyB/B,EF/BuB,SAACN,GAMpB,OACI,iBAAKH,UAAWQ,EAAhB,WACI,gBAAKR,UAAWQ,EAAhB,SAEQL,EAAM2B,QAAQQ,KAAI,SAAAC,GAAC,OAAI,SAAChC,EAAD,CAAYI,KAAM4B,EAAE5B,KAAiBD,GAAI6B,EAAE7B,IAAZ6B,EAAE7B,UAIhE,gBAAKV,UAAWQ,EAAhB,SAEQL,EAAM6B,SAASM,KAAI,SAAAE,GAAC,OAAI,SAAC5B,EAAD,CAASC,QAAS2B,EAAE3B,SAAc2B,EAAE9B,UAGpE,SAACK,EAAD,CAAqBG,SAjBP,SAACuB,GACnBtC,EAAM+B,WAAWO,EAAON,0B,kBGdhC,KAAgB,MAAQ,6BAA6B,iBAAmB","sources":["Utils/Validators/validators.tsx","components/Common/FormsControls/FormsControls.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","HOC/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","webpack://samurai-way/./src/components/Common/FormsControls/FormsControls.module.css?8edf"],"sourcesContent":["import React from \"react\";\r\n\r\n\r\nexport const required = (value:any) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:any) => (value:any) =>{\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n\r\n}\r\n\r\n/*export const maxLength30 = (value:any) => {\r\n    if (value.length > 30) {\r\n        return \"Max length is 30 symbols\"\r\n    }\r\n    return undefined\r\n\r\n}*/\r\n","import React, {FC, HTMLInputTypeAttribute} from \"react\";\r\nimport {WrappedFieldInputProps, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\ntype FormsControls = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n}\r\n\r\nconst FormControl: FC<Omit<FormsControls, 'input'> & {children: JSX.Element}> = ({meta, children, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={hasError ? styles.error :\"\"}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Textarea: FC<FormsControls> = (props) => {\r\n    const {input, ...restProps} = props\r\n    return <FormControl{...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input: FC<FormsControls> = (props) => {\r\n    const {input, ...restProps} = props\r\n    return <FormControl{...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__iwnBc\",\"dialogsItems\":\"Dialogs_dialogsItems__3fT3q\",\"dialog\":\"Dialogs_dialog__Ih882\",\"active\":\"Dialogs_active__R4X51\",\"messages\":\"Dialogs_messages__Cp8eH\",\"message\":\"Dialogs_message__3fF5o\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype MessagePropsType = {\r\n    message:string\r\n}\r\n\r\n\r\nexport const Message = (props:MessagePropsType) => {\r\n\r\n    return(\r\n      <div className={s.message}>\r\n          {props.message}\r\n      </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {MDTP, MSTP} from \"./DialogsContainer\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../Utils/Validators/validators\";\r\n\r\n\r\nexport type DialogsPropsType = MSTP & MDTP\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {\r\n                    props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n                }\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                {\r\n                    props.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n                }\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageText: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} validate={[required, maxLength50]} name=\"newMessageText\"\r\n                   placeholder=\"Enter your message\"/>\r\n        </div>\r\n        <div>\r\n            <button>addMessage</button>\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootStateType} from \"../Redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {MDTP, MSTPRedirectType} from \"../components/Profile/ProfileContainer\";\r\n\r\n\r\nlet mapStateToPropsRedirect = (state: RootStateType): MSTPRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>): ComponentType<T> {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n           return <Redirect to=\"/login\"/>\r\n        }\r\n\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MSTPRedirectType,MDTP,{},RootStateType>(mapStateToPropsRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {\r\n    addMessageTextAC,\r\n    dialogsArrayType,\r\n    messagesArrayType,\r\n} from \"../../Redux/Dialogs-reducer\";\r\nimport {Dialogs, NewMessageFormValuesType} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../../Redux/Redux-store\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\n\r\ntype CommonType = MSTP & MDTP\r\n\r\nexport type MSTP = {\r\n    dialogs: Array<dialogsArrayType>,\r\n    messages: Array<messagesArrayType>,\r\n    isAuth: boolean\r\n}\r\n\r\n// type MSTP = ReturnType<typeof mapStateToProps>\r\n\r\nexport type MDTP = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MSTP => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: (newMessageText:string) => {\r\n            dispatch(addMessageTextAC(newMessageText))\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default compose< ComponentType >(\r\n    connect<MSTP, MDTP, {}, RootStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n/*\r\nexport default DialogsContainer\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\nlet AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n*/\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__uPXXb\",\"formSummaryError\":\"FormsControls_formSummaryError__eeAb-\"};"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","meta","children","hasError","touched","error","className","styles","Textarea","props","input","restProps","Input","DialogItem","s","to","id","name","Message","message","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","mapStateToPropsRedirect","state","isAuth","auth","compose","connect","dialogs","dialogsPage","messages","dispatch","addMessage","newMessageText","addMessageTextAC","Component","map","d","m","values"],"sourceRoot":""}