{"version":3,"file":"static/js/944.acf213e4.chunk.js","mappings":"qKAGO,IAAMA,EAAW,SAACC,GACrB,IAAIA,EAGJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAmB,SAACF,GAChD,GAAIA,EAAMG,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,8KCAFE,EAA0E,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAC9EC,IADsG,YAC3FF,EAAKG,SAAWH,EAAKI,OACtC,OAAO,iBAAKC,UAAWH,EAAWI,EAAAA,EAAAA,MAAc,GAAzC,WACH,yBACKL,IAEJC,IAAY,0BAAOF,EAAKI,YAIpBG,EAA8B,SAACC,GACxC,IAAOC,EAAuBD,EAAvBC,MAAUC,GAAjB,OAA8BF,EAA9B,GACA,OAAO,SAACT,GAAD,kBAAgBS,GAAhB,cAAuB,uCAAcC,GAAWC,QAE9CC,EAA2B,SAACH,GACrC,IAAOC,EAAuBD,EAAvBC,MAAUC,GAAjB,OAA8BF,EAA9B,GACA,OAAO,SAACT,GAAD,kBAAgBS,GAAhB,cAAuB,oCAAWC,GAAWC,S,8HCkClDE,GAAiBC,EAAAA,EAAAA,GAAoB,CAACC,KAAM,SAA3BD,EAtBsD,SAACL,GAC1E,OAAO,kBAAMO,SAAUP,EAAMQ,aAAtB,WACH,0BACI,SAAC,IAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAWR,EAAAA,EAAOS,SAAU,CAAC1B,EAAAA,QAE7E,0BACI,SAAC,IAAD,CAAOuB,YAAa,WAAYC,KAAM,WAAYC,UAAWR,EAAAA,EAAOS,SAAU,CAAC1B,EAAAA,GACxE2B,KAAM,gBAEjB,4BACI,SAAC,IAAD,CAAOF,UAAWR,EAAAA,EAAOO,KAAM,aAAcG,KAAM,aADvD,iBAICb,EAAMc,aAAc,gBAAKC,IAAKf,EAAMc,aACpCd,EAAMc,aACH,SAAC,IAAD,CAAOH,UAAWR,EAAAA,EAAOO,KAAM,UAAWE,SAAU,CAAC1B,EAAAA,GAAWuB,YAAa,uBAChFT,EAAMJ,QAAS,gBAAKC,UAAWmB,EAAAA,EAAAA,iBAAhB,SAAyChB,EAAMJ,SAC/D,0BACI,8CAYZ,WAAeqB,EAAAA,EAAAA,KANO,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBL,WAAYI,EAAME,KAAKN,cAGS,CAACO,MAAAA,EAAAA,GAAOC,OAAAA,EAAAA,IAAhD,EAlDc,SAACtB,GAKX,OAAIA,EAAMmB,QACC,SAAC,KAAD,CAAUI,GAAI,cAGrB,4BACI,mCACA,kEACA,wDACA,2CACA,SAACnB,EAAD,CAAgBG,SAbP,SAACiB,GACdxB,EAAMqB,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAYrCd,WAAYd,EAAMc,oB,kBCjClE,KAAgB,MAAQ,6BAA6B,iBAAmB","sources":["Utils/Validators/validators.tsx","components/Common/FormsControls/FormsControls.tsx","components/Login/Login.tsx","webpack://samurai-way/./src/components/Common/FormsControls/FormsControls.module.css?8edf"],"sourcesContent":["import React from \"react\";\r\n\r\n\r\nexport const required = (value:any) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:any) => (value:any) =>{\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n\r\n/*export const maxLength30 = (value:any) => {\r\n    if (value.length > 30) {\r\n        return \"Max length is 30 symbols\"\r\n    }\r\n    return undefined\r\n\r\n}*/\r\n","import React, {FC, HTMLInputTypeAttribute} from \"react\";\r\nimport {WrappedFieldInputProps, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\ntype FormsControls = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n}\r\n\r\nconst FormControl: FC<Omit<FormsControls, 'input'> & {children: JSX.Element}> = ({meta, children, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={hasError ? styles.error :\"\"}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Textarea: FC<FormsControls> = (props) => {\r\n    const {input, ...restProps} = props\r\n    return <FormControl{...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input: FC<FormsControls> = (props) => {\r\n    const {input, ...restProps} = props\r\n    return <FormControl{...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/Validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../Redux/Auth-reducer\";\r\nimport {RootStateType} from \"../../Redux/Redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"../../components/Common/FormsControls/FormsControls.module.css\"\r\n\r\ntype MSTP = {\r\n    isAuth: boolean,\r\n    captchaUrl: null | string | undefined\r\n}\r\ntype MDTP = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void,\r\n    logout: () => void\r\n}\r\ntype CommonType = MDTP & MSTP\r\n\r\nconst Login = (props: CommonType) => {\r\n    const onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <h4>Use common test account credentials:</h4>\r\n            <h5>Email: 7.jciab.7@gmail.com</h5>\r\n            <h5>Password: 111</h5>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<any, CommonType> & CommonType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field placeholder={\"Email\"} name={\"email\"} component={Input} validate={[required]}/>\r\n        </div>\r\n        <div>\r\n            <Field placeholder={\"Password\"} name={\"password\"} component={Input} validate={[required]}\r\n                   type={\"password\"}/>\r\n        </div>\r\n        <div>\r\n            <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>\r\n            Remember me\r\n        </div>\r\n        {props.captchaUrl && <img src={props.captchaUrl}/>}\r\n        {props.captchaUrl &&\r\n            <Field component={Input} name={\"captcha\"} validate={[required]} placeholder={\"Symbols from image\"}/>}\r\n        {props.error && <div className={style.formSummaryError}>{props.error}</div>}\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst LoginReduxForm = reduxForm<any, any>({form: \"Login\"})(LoginForm)\r\n\r\nlet mapStateToProps = (state: RootStateType): MSTP => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {login, logout})(Login)","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__uPXXb\",\"formSummaryError\":\"FormsControls_formSummaryError__eeAb-\"};"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","meta","children","hasError","touched","error","className","styles","Textarea","props","input","restProps","Input","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","placeholder","name","component","validate","type","captchaUrl","src","style","connect","state","isAuth","auth","login","logout","to","formData","email","password","rememberMe","captcha"],"sourceRoot":""}